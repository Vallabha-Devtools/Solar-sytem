name: unit testing for the solarsytem project
on:  
  push:

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{vars.MONGO_USERNAME}}
  MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}

jobs:   
  build:
    strategy:
      matrix:
        node-version: [18,20]
        os: [ubuntu-latest,windows-latest]
        exclude:
          - node-version: 18
            os: windows-latest
        include:
          - node-version: 18
            os: ubuntu-latest
    runs-on: ${{matrix.os}}
    steps:
      - name: checkout the repository
        uses: actions/checkout@v4.2.2
        
      - name: Setup the nodeJS
        uses: actions/setup-node@v4
        with:
          node-version: ${{matrix.node-version}}

      - name: cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{runner.os}}-node_modules-${{hashfiles('package-lock.json')}}

      - name: install dependencies
        run: npm install
        
      - name: Testing the file
        run: npm test

  code-coverage:
    container: 
      image: node:18
    #services:
    #  mongo-db:
    #    image: vallabha051/mongodb-db:latest
    #env: 
    #  MONGO_URI: 'mongodb://localhost:27017/superData'
    #  MONGO_USERNAME: non-prod-user
    #  MONGO_PASSWORD: non-prod-password
    runs-on: ubuntu-latest
    steps:
      - name: run the code-coverage
        continue-on-error: true
        run: npm run coverage

      - name: Archive the Test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Test-Results
          path: Test-Results.xml
  
  docker:
    name: containerization
    needs: [build,code-coverage]
    permissions:
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
 
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DH_USERNAME }}
          password: ${{ secrets.DH_PASSWORD }}
 
      - name: Login to GH Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
 
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ vars.DH_USERNAME }}/myrepo:${{ github.sha }}
 
      - name: Testing Docker Img
        run: |
          docker images
          docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$ MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ vars.DH_USERNAME }}/myrepo:${{ github.sha }}
          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo $IP

          echo Testing Image using wget
          wget -q -o - 127.0.0.1:3000/live | grep live
     
      - name: pushing to container registry
        if: always()
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ vars.DH_USERNAME }}/smyrepo:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/myrepo/${{ github.sha }}

  # dev-deploy:
  #   needs: [build,code-coverage]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout the repository
  #       uses: actions/checkout@v4.2.2
      
  #     - name: kubectl install
  #       uses: azure/setup-kubectl@v3
  #       with: 
  #         version: 'v1.26.0'  
